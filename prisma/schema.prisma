datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
  DOCTOR
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum LabStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum HomeTestType {
  BLOOD_TEST
  URINE_TEST
  STOOL_TEST
  COVID_TEST
  DIABETES_MONITORING
  CHOLESTEROL_CHECK
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  notifications         Notification[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  emailSubscription     EmailSubscription?     @relation(fields: [emailSubscriptionId], references: [id])
  emailSubscriptionId   String?
  prescriptions         Prescription[]
  appointments          Appointment[]
  LabTest               LabTest[]
}

model Doctor {
  id           String               @id @default(cuid())
  name         String
  email        String?              @unique
  speciality   String
  availability DoctorAvailability[]
  appointments Appointment[]
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
}

model DoctorAvailability {
  id         String   @id @default(cuid())
  day        String
  startTime  DateTime
  endTime    DateTime
  doctor     Doctor   @relation(fields: [doctorId], references: [id])
  doctorId   String
  speciality String
}

model Appointment {
  id             String            @id @default(cuid())
  status         AppointmentStatus
  createdAt      DateTime          @default(now())
  expiresAt      DateTime
  startTime      DateTime
  endTime        DateTime
  user           User?             @relation(fields: [userId], references: [id])
  userId         String?
  doctor         Doctor?           @relation(fields: [doctorId], references: [id])
  doctorId       String?
  patientName    String?
  patientContact String?
}

model LabTest {
  id                  String       @id @default(cuid())
  userId              String?
  contactInfo         String
  address             String
  testType            HomeTestType
  customTestRequest   String?
  specialInstructions String?
  testStartTime       DateTime
  testEndTime         DateTime
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  User                User?        @relation(fields: [userId], references: [id])
  status              LabStatus
}

model Prescription {
  id          String   @id @default(cuid())
  imageUrl    String
  uploadedAt  DateTime @default(now())
  userId      String?
  user        User?    @relation(fields: [userId], references: [id])
  isTemporary Boolean  @default(true)
}

model EmailSubscription {
  id            String   @id @default(cuid())
  email         String   @unique
  subscribeDate DateTime @default(now())
  isSubscribed  Boolean  @default(false)
  users         User[]
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      String
  message   String
  createdAt DateTime @default(now())
  expiresAt DateTime
  isRead    Boolean  @default(false)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}
