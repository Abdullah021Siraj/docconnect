datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
  DOCTOR
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  notifications         Notification[] // Relation to Notification model
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  emailSubscription     EmailSubscription?     @relation(fields: [emailSubscriptionId], references: [id])
  emailSubscriptionId   String?
  prescriptions         Prescription[]
  appointments          Appointment[]
}

model Doctor {
  id           String               @id @default(cuid())
  name         String
  email        String?
  availability DoctorAvailability[]
  appointments Appointment[]
  createdAt    DateTime
  updatedAt    DateTime
  speciality   String
}

model DoctorAvailability {
  id        String   @id @default(cuid())
  day       String
  startTime DateTime
  endTime   DateTime
  doctor    Doctor   @relation(fields: [doctorId], references: [id])
  doctorId  String
}

model Appointment {
  id                   String            @id @default(cuid())
  status               AppointmentStatus
  createdAt            DateTime          @default(now())
  expiresAt            DateTime
  startTime            DateTime
  endTime              DateTime
  user                 User?             @relation(fields: [userId], references: [id])
  userId               String?
  doctorAvailabilityId String?
  doctor               Doctor?           @relation(fields: [doctorId], references: [id])
  doctorId             String?
  patientName          String?
  patientContact       String?
}

model Prescription {
  id          String   @id @default(cuid())
  imageUrl    String // URL or path to the stored image
  uploadedAt  DateTime @default(now())
  userId      String? // Nullable to allow for guest uploads
  user        User?    @relation(fields: [userId], references: [id])
  isTemporary Boolean  @default(true) // Indicates if it's temporary (guest) or permanent (registered user)
}

model EmailSubscription {
  id            String   @id @default(cuid())
  email         String   @unique
  subscribeDate DateTime @default(now())
  isSubscribed  Boolean  @default(false)
  User          User[]
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      String // e.g., "LOGIN", "LOGIN_ATTEMPT"
  message   String // e.g., "User logged in successfully", "Failed login attempt"
  createdAt DateTime @default(now())
  expiresAt DateTime
  isRead    Boolean  @default(false)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}
